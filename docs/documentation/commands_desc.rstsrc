.. This file was autogenerated by scripts/src2rst.py.
   The extension .rstsrc is used to avoid sphinx copying this file directly.
   Do not edit by hand.

Global
******

.. table:: Overview of global commands
   :widths: auto

   ============================= ===========
   Command                       Description
   ============================= ===========
   :ref:`ref_global_alias`       Add an alias for a command.
   :ref:`ref_global_command`     Enter command mode.
   :ref:`ref_global_copy-name`   Copy name of current path to system clipboard.
   :ref:`ref_global_delete`      Move a file to the trash directory.
   :ref:`ref_global_enter`       Enter another mode.
   :ref:`ref_global_fullscreen`  Toggle fullscreen mode.
   :ref:`ref_global_next`        Select next image.
   :ref:`ref_global_open`        Open a path.
   :ref:`ref_global_paste-name`  Paste path from clipboard to open command.
   :ref:`ref_global_prev`        Select previous image.
   :ref:`ref_global_quit`        Quit vimiv.
   :ref:`ref_global_scale`       Scale the image.
   :ref:`ref_global_search`      Start a search.
   :ref:`ref_global_search-next` Continue search to the next match.
   :ref:`ref_global_search-prev` Continue search to the previous match.
   :ref:`ref_global_set`         Set an option.
   :ref:`ref_global_toggle`      Toggle one mode.
   :ref:`ref_global_undelete`    Restore a file from the trash directory.
   ============================= ===========

.. _ref_global_alias:

alias
=====

Add an alias for a command.

**syntax:** ``:alias name command [--mode=MODE]``

The command can be a vimiv command like ``quit`` or an external shell
command like ``!gimp``.

positional arguments:
    * ``name``: Name of the newly defined alias.
    * ``command`` Name of the command to alias.

optional arguments:
    * ``--mode``: Mode in which the alias is valid. Default: ``global``.


.. _ref_global_command:

command
=======

Enter command mode.

**syntax:** ``:command [--text=TEXT]``

optional arguments:
    * ``text``: String to append to the ``:`` prefix.


.. _ref_global_copy-name:

copy-name
=========

Copy name of current path to system clipboard.

**syntax:** ``:copy-name [--abspath] [--primary]``

optional arguments:
    * ``--abspath``: Copy absolute path instead of basename.
    * ``--primary``: Copy to primary selection.


.. _ref_global_delete:

delete
======

Move a file to the trash directory.

**syntax:** ``:delete filename``

positional arguments:
    * ``filename``: The name of the file to delete.


.. _ref_global_enter:

enter
=====

Enter another mode.

**syntax:** ``:enter mode``

positional arguments:
    * ``mode``: The mode to enter (image/library/thumbnail/manipulate).


.. _ref_global_fullscreen:

fullscreen
==========

Toggle fullscreen mode.


.. _ref_global_next:

next
====

Select next image.

**count:** multiplier


.. _ref_global_open:

open
====

Open a path.

**syntax:** ``:open path``

If the path is an image, it is opened in image mode. If it is a directory,
it is opened in the library. Other paths are not supported.

positional arguments:
    * ``path``: The path to open.


.. _ref_global_paste-name:

paste-name
==========

Paste path from clipboard to open command.

**syntax:** ``:paste-name [--primary]``

optional arguments:
    * ``--primary``: Paste from  primary selection.


.. _ref_global_prev:

prev
====

Select previous image.

**count:** multiplier


.. _ref_global_quit:

quit
====

Quit vimiv.


.. _ref_global_scale:

scale
=====

Scale the image.

**syntax:** ``:scale [--level=LEVEL]``

optional arguments:
    * ``level``: The level to scale the image to.

.. hint:: supported levels:

    * **fit**: Fit image to current viewport.
    * **fit-width**: Fit image width to current viewport.
    * **fit-height**: Fit image height to current viewport.
    * **overzoom**: Like **fit** but limit to the overzoom setting.
    * **float**: Set scale to arbitrary decimal value.


.. _ref_global_search:

search
======

Start a search.

**syntax:** ``:search [--reverse]``

optional arguments:
    * ``--reverse``: Search in reverse direction.


.. _ref_global_search-next:

search-next
===========

Continue search to the next match.

**syntax:** ``:search-next``

**count:** multiplier


.. _ref_global_search-prev:

search-prev
===========

Continue search to the previous match.

**syntax:** ``:search-next``

**count:** multiplier


.. _ref_global_set:

set
===

Set an option.

**syntax:** ``:set setting [value]``

positional arguments:
    * ``setting``: Name of the setting to set.
    * ``value``: Value to set the setting to. If not given, set to default.


.. _ref_global_toggle:

toggle
======

Toggle one mode.

**syntax:** ``:toggle mode``.

If the mode is currently visible, leave it. Otherwise enter it.

positional arguments:
    * ``mode``: The mode to toggle (image/library/thumbnail/manipulate).


.. _ref_global_undelete:

undelete
========

Restore a file from the trash directory.

**syntax:** ``:undelete basename``

positional arguments:
    * ``basename``: The basename of the file in the trash directory.

Image
*****

.. table:: Overview of image commands
   :widths: auto

   ============================== ===========
   Command                        Description
   ============================== ===========
   :ref:`ref_image_center`        Center the image in the viewport.
   :ref:`ref_image_flip`          Flip the image.
   :ref:`ref_image_goto`          Select specific image in current filelist.
   :ref:`ref_image_play-or-pause` Toggle betwen play and pause of animation.
   :ref:`ref_image_rotate`        Rotate the image.
   :ref:`ref_image_scroll`        Scroll the image in the given direction.
   :ref:`ref_image_scroll-edge`   Scroll the image to one edge.
   :ref:`ref_image_slideshow`     Toggle slideshow.
   :ref:`ref_image_write`         Save the current image to disk.
   :ref:`ref_image_zoom`          Zoom the current widget.
   ============================== ===========

.. _ref_image_center:

center
======

Center the image in the viewport.


.. _ref_image_flip:

flip
====

Flip the image.

**syntax:** ``:flip [--vertical]``

optional arguments:
    * ``--vertical``: Flip image vertically instead of horizontally.


.. _ref_image_goto:

goto
====

Select specific image in current filelist.

**syntax:** ``:goto index``

positional arguments:
    * index: Number of the image to select.

.. hint:: -1 is the last image.

**count:** Select [count]th image instead.


.. _ref_image_play-or-pause:

play-or-pause
=============

Toggle betwen play and pause of animation.


.. _ref_image_rotate:

rotate
======

Rotate the image.

**syntax:** ``:rotate [--counter-clockwise]``

optional arguments:
    * ``--counter_clockwise``: Rotate counter clockwise.

**count:** multiplier


.. _ref_image_scroll:

scroll
======

Scroll the image in the given direction.

**syntax:** ``:scroll direction``

positional arguments:
    * ``direction``: The direction to scroll in (left/right/up/down).

**count:** multiplier


.. _ref_image_scroll-edge:

scroll-edge
===========

Scroll the image to one edge.

**syntax:** ``:scroll-edge direction``.

positional arguments:
    * ``direction``: The direction to scroll in (left/right/up/down).


.. _ref_image_slideshow:

slideshow
=========

Toggle slideshow.


.. _ref_image_write:

write
=====

Save the current image to disk.

**syntax:** ``:write [path]``.

positional arguments:
    * ``path``: Save to this path instead of the current one.


.. _ref_image_zoom:

zoom
====

Zoom the current widget.

**syntax:** ``:zoom direction``

positional arguments:
    * ``direction``: The direction to zoom in (in/out).

**count:** multiplier

Library
*******

.. table:: Overview of library commands
   :widths: auto

   ========================= ===========
   Command                   Description
   ========================= ===========
   :ref:`ref_library_goto`   Select specific row in current filelist.
   :ref:`ref_library_scroll` Scroll the library in the given direction.
   ========================= ===========

.. _ref_library_goto:

goto
====

Select specific row in current filelist.

**syntax:** ``:goto row``

positional arguments:
    * ``row``: Number of the row to select.

.. hint:: -1 is the last row.

**count:** Select [count]th element instead.


.. _ref_library_scroll:

scroll
======

Scroll the library in the given direction.

**syntax:** ``:scroll direction``

The behaviour is similar to the file manager ranger.

* Scrolling left selects the current file.
* Scrolling right selects the parent directory.
* Scrolling up and down moves the cursor.

positional arguments:
    * ``direction``: The direction to scroll in (left/right/up/down).

**count:** multiplier

Thumbnail
*********

.. table:: Overview of thumbnail commands
   :widths: auto

   =========================== ===========
   Command                     Description
   =========================== ===========
   :ref:`ref_thumbnail_goto`   Select specific thumbnail in current filelist.
   :ref:`ref_thumbnail_scroll` Scroll to another thumbnail in the given direction.
   :ref:`ref_thumbnail_zoom`   Zoom the current widget.
   =========================== ===========

.. _ref_thumbnail_goto:

goto
====

Select specific thumbnail in current filelist.

**syntax:** ``:goto index``


positional arguments:
    * ``index``: Number of the thumbnail to select.

.. hint:: -1 is the last thumbnail.

**count:** Select [count]th thubnail instead.


.. _ref_thumbnail_scroll:

scroll
======

Scroll to another thumbnail in the given direction.

**syntax:** ``:scroll direction``

positional arguments:
    * ``direction``: The direction to scroll in (left/right/up/down).

**count:** multiplier


.. _ref_thumbnail_zoom:

zoom
====

Zoom the current widget.

**syntax:** ``:zoom direction``

positional arguments:
    * ``direction``: The direction to zoom in (in/out).

**count:** multiplier

Command
*******

.. table:: Overview of command commands
   :widths: auto

   ======================================== ===========
   Command                                  Description
   ======================================== ===========
   :ref:`ref_command_complete`              Invoke command line completion.
   :ref:`ref_command_history`               Cycle through command history.
   :ref:`ref_command_history-substr-search` Cycle through command history with substring matching.
   :ref:`ref_command_leave-commandline`     Leave command mode.
   ======================================== ===========

.. _ref_command_complete:

complete
========

Invoke command line completion.

**syntax:** ``:complete [--inverse]``

optional arguments:
    * ``--inverse``: Complete in inverse direction.


.. _ref_command_history:

history
=======

Cycle through command history.

**syntax:** ``:history direction``

positional arguments:
    * ``direction``: The direction to cycle in (next/prev).


.. _ref_command_history-substr-search:

history-substr-search
=====================

Cycle through command history with substring matching.

**syntax:** ``:history-substr-search direction``

positional arguments:
    * ``direction``: The direction to cycle in (next/prev).


.. _ref_command_leave-commandline:

leave-commandline
=================

Leave command mode.

Manipulate
**********

.. table:: Overview of manipulate commands
   :widths: auto

   ================================ ===========
   Command                          Description
   ================================ ===========
   :ref:`ref_manipulate_accept`     Leave manipulate keeping the changes.
   :ref:`ref_manipulate_brightness` Manipulate brightness.
   :ref:`ref_manipulate_command`    Enter command mode.
   :ref:`ref_manipulate_contrast`   Manipulate contrast.
   :ref:`ref_manipulate_decrease`   Decrease the value of the current manipulation.
   :ref:`ref_manipulate_discard`    Discard any changes and leave manipulate.
   :ref:`ref_manipulate_increase`   Increase the value of the current manipulation.
   :ref:`ref_manipulate_set`        Set the value of the current manipulation.
   ================================ ===========

.. _ref_manipulate_accept:

accept
======

Leave manipulate keeping the changes.


.. _ref_manipulate_brightness:

brightness
==========

Manipulate brightness.

**syntax:** ``:brightness [value]``

If neither value nor count are given, set brightness to the current
manipulation. Otherwise set brightness to the given value.

positional arguments:
    * ``value``: Set the brightness to value. Range: -127 to 127.

**count:** Set brightness to [count].


.. _ref_manipulate_command:

command
=======

Enter command mode.

**syntax:** ``:command [--text=TEXT]``

optional arguments:
    * ``text``: String to append to the ``:`` prefix.


.. _ref_manipulate_contrast:

contrast
========

Manipulate contrast.

**syntax:** ``:contrast [value]``

If neither value nor count are given, set contrast to the current
manipulation. Otherwise set contrast to the given value.

positional arguments:
    * ``value``: Set the contrast to value. Range: -127 to 127.

**count:** Set contrast to [count].


.. _ref_manipulate_decrease:

decrease
========

Decrease the value of the current manipulation.

**syntax:** ``:decrease value``

positional arguments:
    * ``value``: The value to decrease by.

**count:** multiplier


.. _ref_manipulate_discard:

discard
=======

Discard any changes and leave manipulate.


.. _ref_manipulate_increase:

increase
========

Increase the value of the current manipulation.

**syntax:** ``:increase value``

positional arguments:
    * ``value``: The value to increase by.

**count:** multiplier


.. _ref_manipulate_set:

set
===

Set the value of the current manipulation.

**syntax:** ``:set value``

positional arguments:
    * ``value``: Value to set the manipulation to. Range -127 to 127.

**count:** Set the manipulation to [count] instead.

